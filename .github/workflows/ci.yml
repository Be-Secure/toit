{"name":"CI","on":"push","jobs":{"build":{"steps":[{"name":"Checkout","uses":"actions/checkout@v2"},{"name":"Fetch tags","run":"git fetch --tags\n"},{"name":"Initialize mbedtls submodule","run":"cd third_party/esp-idf\ngit submodule update --init\ngit submodule update --init components/mbedtls\n"},{"name":"Set up Go","uses":"actions/setup-go@v2","with":{"go-version":"1.17"}},{"name":"Get Go paths","run":"echo \"::set-output name=go-build::$(go env GOCACHE)\"\necho \"::set-output name=go-mod::$(go env GOMODCACHE)\"\n","id":"go-cache-paths"},{"name":"Go build","uses":"actions/cache@v2","with":{"path":"${{ steps.go-cache-paths.outputs.go-build }}","key":"Windows-go-build-${{ hashFiles('**/go.sum') }}","restore-keys":"Windows-go-build"}},{"name":"Go mod","uses":"actions/cache@v2","with":{"path":"${{ steps.go-cache-paths.outputs.go-mod }}","key":"Windows-go-build-${{ hashFiles('**/go.sum') }}","restore-keys":"Windows-go-build"}},{"name":"Choco install ccache","run":"choco install ccache\n"},{"name":"Create timestamp","run":"string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\nmessage(\"::set-output name=timestamp::${current_date}\")\n","id":"timestamp_step","shell":"cmake -P {0}"},{"name":"Ccache","uses":"actions/cache@v2","with":{"path":"${{ github.workspace }}/.ccache","key":"Windows-ccache-${{ steps.timestamp_step.outputs.timestamp }}","restore-keys":"Windows-ccache"}},{"name":"set-env","run":"echo 'CCACHE_DIR=${{ github.workspace }}/.ccache' >> $GITHUB_ENV\necho 'CCACHE_MAXSIZE=400M' >> $GITHUB_ENV\necho 'CCACHE_COMPRESS=true' >> $GITHUB_ENV\necho 'CCACHE_COMPRESS_LEVEL=6' >> $GITHUB_ENV\necho 'CCACHE_BASEDIR=${{ github.workspace }}' >> $GITHUB_ENV\n"},{"name":"Choco install ninja","run":"choco install ninja\n"},{"name":"Make","run":"make all"},{"name":"Test","run":"make test\nmake test-health\n"},{"name":"Pack artifacts","run":"cp -R ./build/host/sdk ./build/host/toit\ntar -czf build/toit-windows.tar.gz -C ./build/host --dereference toit\n","shell":"bash"},{"name":"Upload Windows-build","uses":"actions/upload-artifact@v2","with":{"name":"Windows-build","path":"build/toit-windows.tar.gz"}},{"name":"Upload release artifacts","uses":"svenstaro/upload-release-action@v2","with":{"repo_token":"${{ secrets.GITHUB_TOKEN }}","file":"build/toit-windows.tar.gz","tag":"github.ref","overwrite":true},"if":"github.event_name == 'release'"}],"runs-on":"windows-2022"},"esp32":{"steps":[{"name":"Checkout","uses":"actions/checkout@v2"},{"name":"Fetch tags","run":"git fetch --tags\n"},{"name":"Initialize submodules","run":"git submodule sync --recursive\ngit submodule update --init --recursive -j 2\n"},{"name":"Set up Go","uses":"actions/setup-go@v2","with":{"go-version":"1.17"}},{"name":"Get Go paths","run":"echo \"::set-output name=go-build::$(go env GOCACHE)\"\necho \"::set-output name=go-mod::$(go env GOMODCACHE)\"\n","id":"go-cache-paths"},{"name":"Go build","uses":"actions/cache@v2","with":{"path":"${{ steps.go-cache-paths.outputs.go-build }}","key":"Linux-go-build-${{ hashFiles('**/go.sum') }}","restore-keys":"Linux-go-build"}},{"name":"Go mod","uses":"actions/cache@v2","with":{"path":"${{ steps.go-cache-paths.outputs.go-mod }}","key":"Linux-go-build-${{ hashFiles('**/go.sum') }}","restore-keys":"Linux-go-build"}},{"name":"Apt-get update","run":"sudo apt-get update\n"},{"name":"Apt-get install ccache","run":"sudo apt-get install ccache\n"},{"name":"Create timestamp","run":"string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\nmessage(\"::set-output name=timestamp::${current_date}\")\n","id":"timestamp_step","shell":"cmake -P {0}"},{"name":"Ccache","uses":"actions/cache@v2","with":{"path":"${{ github.workspace }}/.ccache","key":"Linux-ccache-${{ steps.timestamp_step.outputs.timestamp }}","restore-keys":"Linux-ccache"}},{"name":"set-env","run":"echo 'CCACHE_DIR=${{ github.workspace }}/.ccache' >> $GITHUB_ENV\necho 'CCACHE_MAXSIZE=400M' >> $GITHUB_ENV\necho 'CCACHE_COMPRESS=true' >> $GITHUB_ENV\necho 'CCACHE_COMPRESS_LEVEL=6' >> $GITHUB_ENV\necho 'CCACHE_BASEDIR=${{ github.workspace }}' >> $GITHUB_ENV\n"},{"name":"Ccache symlinks","run":"mkdir ccache_interceptors\ncd ccache_interceptors\nln -s $(command -v ccache) xtensa-esp32-elf-gcc\nln -s $(command -v ccache) xtensa-esp32-elf-g++\n"},{"name":"Apt-get install ninja-build gcc-multilib g++-multilib","run":"sudo apt-get install ninja-build gcc-multilib g++-multilib\n"},{"name":"Install ESP32 tools","run":"third_party/esp-idf/install.sh\n"},{"name":"Make","run":"source third_party/esp-idf/export.sh\n# Make sure the ccache interceptors are before any other path.\nexport PATH=\"${{ github.workspace }}/esp32_ccache_path\":$PATH\nmake esp32\n","shell":"bash"}],"runs-on":"ubuntu-latest"}}}
